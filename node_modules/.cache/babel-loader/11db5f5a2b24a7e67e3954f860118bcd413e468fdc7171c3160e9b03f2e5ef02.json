{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst useFetch = function (url) {\n  _s();\n  let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"GET\";\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [posOptions, setPostOptions] = useState(null);\n  const [putOptions, setPutOptions] = useState(null);\n  const postData = data => {\n    setPostOptions({\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n  };\n  const putData = data => {\n    setPutOptions({\n      method: \"PUTS\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n  };\n  useEffect(() => {\n    const fetchData = async options => {\n      setIsLoading(true);\n      try {\n        const res = await fetch(url, {\n          ...options\n        });\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        const data = await res.json();\n        setIsLoading(false);\n        setData(data);\n      } catch (err) {\n        setIsLoading(false);\n        setError(err.message);\n        console.log(err.message);\n      }\n    };\n    if (method === \"GET\") {\n      fetchData();\n    }\n    if (method === \"POST\" && posOptions) {\n      fetchData(posOptions);\n    }\n    if (method === \"PUT\" && putOptions) {\n      fetchData(putOptions);\n    }\n  }, [url, options, method]);\n  return {\n    data,\n    isLoading,\n    error,\n    postData,\n    putData\n  };\n};\n_s(useFetch, \"NbcmA3nXOZ1XvkFwyhRUjsa2LZc=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","_s","method","arguments","length","undefined","data","setData","error","setError","isLoading","setIsLoading","posOptions","setPostOptions","putOptions","setPutOptions","postData","headers","body","JSON","stringify","putData","fetchData","options","res","fetch","ok","Error","statusText","json","err","message","console","log"],"sources":["C:/zattekce/Projects/workplace/react/udemy/udemy-react-dersler-notlarÄ±/udemy-react-dersleri-11_1_yemek_tarifleri_projesi/yemek-tarifleri/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from \"react\"\n\nconst useFetch = (url, method=\"GET\") => {\n    const [data, setData] = useState(null);\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [posOptions, setPostOptions] = useState(null);\n    const [putOptions, setPutOptions] = useState(null);\n\n    const postData = (data) => {\n        setPostOptions({\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        })\n    }\n\n    const putData = (data) => {\n        setPutOptions({\n            method: \"PUTS\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        })\n    }\n\n    useEffect(() => {\n        \n        const fetchData = async (options) => {\n            setIsLoading(true);\n\n            try {\n                const res = await fetch(url, {...options});\n                if(!res.ok) {\n                    throw new Error(res.statusText);\n                }\n                const data = await res.json();\n                setIsLoading(false);\n                setData(data);\n            }\n            catch(err) {\n                setIsLoading(false);\n                setError(err.message);\n                console.log(err.message);\n            }\n        }\n\n        if(method===\"GET\") {\n            fetchData();\n        }\n\n        if(method === \"POST\" && posOptions) {\n            fetchData(posOptions)\n        }\n        if(method === \"PUT\" && putOptions) {\n            fetchData(putOptions)\n        }\n\n       }, [url, options, method])\n\n    return {\n        data, isLoading, error, postData,putData\n    }\n}\n\nexport default useFetch;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,QAAQ,GAAG,SAAAA,CAACC,GAAG,EAAmB;EAAAC,EAAA;EAAA,IAAjBC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAC,KAAK;EAC/B,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACe,UAAU,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACnD,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAElD,MAAMmB,QAAQ,GAAIV,IAAI,IAAK;IACvBO,cAAc,CAAC;MACXX,MAAM,EAAE,MAAM;MACde,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACd,IAAI;IAC7B,CAAC,CAAC;EACN,CAAC;EAED,MAAMe,OAAO,GAAIf,IAAI,IAAK;IACtBS,aAAa,CAAC;MACVb,MAAM,EAAE,MAAM;MACde,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACd,IAAI;IAC7B,CAAC,CAAC;EACN,CAAC;EAEDR,SAAS,CAAC,MAAM;IAEZ,MAAMwB,SAAS,GAAG,MAAOC,OAAO,IAAK;MACjCZ,YAAY,CAAC,IAAI,CAAC;MAElB,IAAI;QACA,MAAMa,GAAG,GAAG,MAAMC,KAAK,CAACzB,GAAG,EAAE;UAAC,GAAGuB;QAAO,CAAC,CAAC;QAC1C,IAAG,CAACC,GAAG,CAACE,EAAE,EAAE;UACR,MAAM,IAAIC,KAAK,CAACH,GAAG,CAACI,UAAU,CAAC;QACnC;QACA,MAAMtB,IAAI,GAAG,MAAMkB,GAAG,CAACK,IAAI,EAAE;QAC7BlB,YAAY,CAAC,KAAK,CAAC;QACnBJ,OAAO,CAACD,IAAI,CAAC;MACjB,CAAC,CACD,OAAMwB,GAAG,EAAE;QACPnB,YAAY,CAAC,KAAK,CAAC;QACnBF,QAAQ,CAACqB,GAAG,CAACC,OAAO,CAAC;QACrBC,OAAO,CAACC,GAAG,CAACH,GAAG,CAACC,OAAO,CAAC;MAC5B;IACJ,CAAC;IAED,IAAG7B,MAAM,KAAG,KAAK,EAAE;MACfoB,SAAS,EAAE;IACf;IAEA,IAAGpB,MAAM,KAAK,MAAM,IAAIU,UAAU,EAAE;MAChCU,SAAS,CAACV,UAAU,CAAC;IACzB;IACA,IAAGV,MAAM,KAAK,KAAK,IAAIY,UAAU,EAAE;MAC/BQ,SAAS,CAACR,UAAU,CAAC;IACzB;EAED,CAAC,EAAE,CAACd,GAAG,EAAEuB,OAAO,EAAErB,MAAM,CAAC,CAAC;EAE7B,OAAO;IACHI,IAAI;IAAEI,SAAS;IAAEF,KAAK;IAAEQ,QAAQ;IAACK;EACrC,CAAC;AACL,CAAC;AAAApB,EAAA,CAhEKF,QAAQ;AAkEd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst useFetch = function (url) {\n  _s();\n  let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"GET\";\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [options, setOptions] = useState(null);\n\n  // Function to handle POST/PUT requests\n  const postData = (data, method) => {\n    setOptions({\n      method: method,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n  };\n\n  // ✅ Move fetchData OUTSIDE useEffect so it can be returned\n  const fetchData = async function () {\n    let fetchOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    setIsLoading(true);\n    try {\n      const res = await fetch(url, {\n        method,\n        ...fetchOptions\n      });\n      if (!res.ok) {\n        throw new Error(res.statusText);\n      }\n      const result = await res.json();\n      console.log(\"API Response:\", result); // ✅ Debugging API response\n      setData(result);\n      setError(null);\n    } catch (err) {\n      setError(err.message);\n      console.log(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    if (method === \"GET\") {\n      fetchData();\n    } else if (options) {\n      console.log(\"POST/PUT Options:\", options);\n      fetchData(options);\n    }\n  }, [url, options, method]);\n  return {\n    data,\n    isLoading,\n    error,\n    postData,\n    refetch: fetchData\n  };\n};\n_s(useFetch, \"9YHTEPcLjUzYQR1/NzymB2iA+ss=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","_s","method","arguments","length","undefined","data","setData","error","setError","isLoading","setIsLoading","options","setOptions","postData","headers","body","JSON","stringify","fetchData","fetchOptions","res","fetch","ok","Error","statusText","result","json","console","log","err","message","refetch"],"sources":["C:/zattekce/Projects/workplace/react/udemy/udemy-react-dersler-notları/udemy-react-dersleri-11_1_yemek_tarifleri_projesi/yemek-tarifleri/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useFetch = (url, method = \"GET\") => {\n    const [data, setData] = useState(null);\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [options, setOptions] = useState(null);\n\n    // Function to handle POST/PUT requests\n    const postData = (data, method) => {\n        setOptions({\n            method: method,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        });\n    };\n\n    // ✅ Move fetchData OUTSIDE useEffect so it can be returned\n    const fetchData = async (fetchOptions = {}) => {\n        setIsLoading(true);\n\n        try {\n            const res = await fetch(url, { method, ...fetchOptions });\n            if (!res.ok) {\n                throw new Error(res.statusText);\n            }\n            const result = await res.json();\n            console.log(\"API Response:\", result); // ✅ Debugging API response\n            setData(result);\n            setError(null);\n        } catch (err) {\n            setError(err.message);\n            console.log(err.message);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        if (method === \"GET\") {\n            fetchData();\n        } else if (options) {\n            console.log(\"POST/PUT Options:\", options);\n            fetchData(options);\n        }\n    }, [url, options, method]);\n\n    return { data, isLoading, error, postData, refetch: fetchData };\n};\n\nexport default useFetch;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,QAAQ,GAAG,SAAAA,CAACC,GAAG,EAAqB;EAAAC,EAAA;EAAA,IAAnBC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EACjC,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA,MAAMiB,QAAQ,GAAGA,CAACR,IAAI,EAAEJ,MAAM,KAAK;IAC/BW,UAAU,CAAC;MACPX,MAAM,EAAEA,MAAM;MACda,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,IAAI;IAC7B,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMa,SAAS,GAAG,eAAAA,CAAA,EAA6B;IAAA,IAAtBC,YAAY,GAAAjB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACtCQ,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACA,MAAMU,GAAG,GAAG,MAAMC,KAAK,CAACtB,GAAG,EAAE;QAAEE,MAAM;QAAE,GAAGkB;MAAa,CAAC,CAAC;MACzD,IAAI,CAACC,GAAG,CAACE,EAAE,EAAE;QACT,MAAM,IAAIC,KAAK,CAACH,GAAG,CAACI,UAAU,CAAC;MACnC;MACA,MAAMC,MAAM,GAAG,MAAML,GAAG,CAACM,IAAI,EAAE;MAC/BC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,MAAM,CAAC,CAAC,CAAC;MACtCnB,OAAO,CAACmB,MAAM,CAAC;MACfjB,QAAQ,CAAC,IAAI,CAAC;IAClB,CAAC,CAAC,OAAOqB,GAAG,EAAE;MACVrB,QAAQ,CAACqB,GAAG,CAACC,OAAO,CAAC;MACrBH,OAAO,CAACC,GAAG,CAACC,GAAG,CAACC,OAAO,CAAC;IAC5B,CAAC,SAAS;MACNpB,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;EAEDb,SAAS,CAAC,MAAM;IACZ,IAAII,MAAM,KAAK,KAAK,EAAE;MAClBiB,SAAS,EAAE;IACf,CAAC,MAAM,IAAIP,OAAO,EAAE;MAChBgB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEjB,OAAO,CAAC;MACzCO,SAAS,CAACP,OAAO,CAAC;IACtB;EACJ,CAAC,EAAE,CAACZ,GAAG,EAAEY,OAAO,EAAEV,MAAM,CAAC,CAAC;EAE1B,OAAO;IAAEI,IAAI;IAAEI,SAAS;IAAEF,KAAK;IAAEM,QAAQ;IAAEkB,OAAO,EAAEb;EAAU,CAAC;AACnE,CAAC;AAAClB,EAAA,CAhDIF,QAAQ;AAkDd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}